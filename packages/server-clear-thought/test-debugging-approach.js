#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ debugging_approach
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —ç–º—É–ª–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ debugging_approach –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * –ó–∞–ø—É—Å–∫: node test-debugging-approach.js
 */

import { DebuggingApproachServer } from './src/servers/debugging-approach-server.js';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
const server = new DebuggingApproachServer();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testCases = [
    {
        name: 'Binary Search Approach',
        input: {
            approachName: 'binary_search',
            issue: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∑–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            steps: [
                '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                '–ù–∞–π—Ç–∏ —Å—Ä–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                '–°—É–∑–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                '–ü–æ–≤—Ç–æ—Ä—è—Ç—å, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–º–º–∏—Ç'
            ],
            findings: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
            resolution: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏'
        }
    },
    {
        name: 'Reverse Engineering Approach',
        input: {
            approachName: 'reverse_engineering',
            issue: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
            steps: [
                '–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∏',
                '–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π',
                '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                '–í–æ—Å—Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
            ],
            findings: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Unicode-—Å–∏–º–≤–æ–ª—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—è—Ö'
        }
    },
    {
        name: 'Divide and Conquer Approach',
        input: {
            approachName: 'divide_conquer',
            issue: '–°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
            steps: [
                '–†–∞–∑–¥–µ–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
                '–ò–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ',
                '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
                '–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º'
            ]
        }
    },
    {
        name: 'Backtracking Approach',
        input: {
            approachName: 'backtracking',
            issue: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
        }
    },
    {
        name: 'Invalid Input - Missing Required Field',
        input: {
            approachName: 'binary_search'
            // issue –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        }
    },
    {
        name: 'Invalid Input - Invalid Approach Name',
        input: {
            approachName: 'invalid_approach',
            issue: '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞'
        }
    },
    {
        name: 'Edge Case - Long Text',
        input: {
            approachName: 'cause_elimination',
            issue: '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. ' +
                '–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫. ' +
                '–ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã. '.repeat(10),
            steps: [
                '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —à–∞–≥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. '.repeat(5),
                '–ï—â–µ –æ–¥–∏–Ω –¥–ª–∏–Ω–Ω—ã–π —à–∞–≥ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. '.repeat(5)
            ],
            findings: '–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π. '.repeat(10)
        }
    },
    {
        name: 'Edge Case - Special Characters',
        input: {
            approachName: 'program_slicing',
            issue: '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: `~!@#$%^&*()_+-=[]{}|;:\'",.<>/?\n\n–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π\n—Ç–µ–∫—Å—Ç\n—Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫',
            steps: [
                '–®–∞–≥ —Å —ç–º–æ–¥–∑–∏: üîç üêõ üîß üî® üß™ üß†',
                '–®–∞–≥ —Å HTML: <div>test</div><script>alert("test")</script>'
            ]
        }
    }
];

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
console.log('=== Testing Debugging Approach Tool ===\n');

for (const testCase of testCases) {
    console.log(`\n--- Test: ${testCase.name} ---`);
    console.log(`Input: ${JSON.stringify(testCase.input, null, 2)}`);

    try {
        const result = server.processApproach(testCase.input);
        console.log('Status: Success');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        if (result.isError) {
            console.log('Response contains error:');
            const responseObj = JSON.parse(result.content[0].text);
            console.log(`Error: ${responseObj.error}`);
            console.log(`Status: ${responseObj.status}`);
        } else {
            console.log('Response:');
            // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            const responseText = result.content[0].text;
            console.log(`${responseText.substring(0, 200)}... (truncated)`);
        }
    } catch (error) {
        console.log('Status: Exception thrown');
        console.log(`Error: ${error.message}`);
    }

    console.log('----------------------------');
}

console.log('\n=== Test Complete ==='); 