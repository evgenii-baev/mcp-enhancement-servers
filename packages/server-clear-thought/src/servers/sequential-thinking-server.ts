import chalk from "chalk";
import { ThoughtData } from "../interfaces/thought-data.js";

/**
 * Server for processing sequential thinking requests
 */
export class SequentialThinkingServer {
    private thoughtHistory: ThoughtData[] = []
    private branches: Record<string, ThoughtData[]> = {}

    /**
     * Validates the input data for a sequential thinking request
     * @param input The input data to validate
     * @returns The validated thought data
     * @throws Error if the input is invalid
     */
    private validateThoughtData(input: unknown): ThoughtData {
        const data = input as Record<string, unknown>

        if (!data.thought || typeof data.thought !== "string") {
            throw new Error("Invalid thought: must be a string")
        }
        if (!data.thoughtNumber || typeof data.thoughtNumber !== "number") {
            throw new Error("Invalid thoughtNumber: must be a number")
        }
        if (!data.totalThoughts || typeof data.totalThoughts !== "number") {
            throw new Error("Invalid totalThoughts: must be a number")
        }
        if (typeof data.nextThoughtNeeded !== "boolean") {
            throw new Error("Invalid nextThoughtNeeded: must be a boolean")
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (data.isRevision !== undefined && typeof data.isRevision !== "boolean") {
            throw new Error("Invalid isRevision: must be a boolean if provided")
        }
        if (data.revisesThought !== undefined && typeof data.revisesThought !== "number") {
            throw new Error("Invalid revisesThought: must be a number if provided")
        }
        if (data.branchFromThought !== undefined && typeof data.branchFromThought !== "number") {
            throw new Error("Invalid branchFromThought: must be a number if provided")
        }
        if (data.branchId !== undefined && typeof data.branchId !== "string") {
            throw new Error("Invalid branchId: must be a string if provided")
        }
        if (data.needsMoreThoughts !== undefined && typeof data.needsMoreThoughts !== "boolean") {
            throw new Error("Invalid needsMoreThoughts: must be a boolean if provided")
        }

        // –õ–æ–≥–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (data.isRevision && !data.revisesThought) {
            throw new Error("revisesThought is required when isRevision is true")
        }
        if (data.branchFromThought && !data.branchId) {
            throw new Error("branchId is required when branchFromThought is provided")
        }

        return {
            thought: data.thought,
            thoughtNumber: data.thoughtNumber,
            totalThoughts: data.totalThoughts,
            nextThoughtNeeded: data.nextThoughtNeeded,
            isRevision: data.isRevision as boolean | undefined,
            revisesThought: data.revisesThought as number | undefined,
            branchFromThought: data.branchFromThought as number | undefined,
            branchId: data.branchId as string | undefined,
            needsMoreThoughts: data.needsMoreThoughts as boolean | undefined,
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º—ã—Å–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
     * @param thoughtData –î–∞–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º—ã—Å–ª–∏
     */
    private formatThought(thoughtData: ThoughtData): string {
        try {
            const {
                thoughtNumber,
                totalThoughts,
                thought,
                isRevision,
                revisesThought,
                branchFromThought,
                branchId,
            } = thoughtData

            let prefix = ""
            let context = ""

            if (isRevision) {
                prefix = chalk.yellow("üîÑ Revision")
                context = ` (revising thought ${revisesThought})`
            } else if (branchFromThought) {
                prefix = chalk.green("üåø Branch")
                context = ` (from thought ${branchFromThought}, ID: ${branchId})`
            } else {
                prefix = chalk.blue("üí≠ Thought")
                context = ""
            }

            const header = `${prefix} ${thoughtNumber}/${totalThoughts}${context}`
            const border = "‚îÄ".repeat(Math.max(header.length, thought.length) + 4)

            return `
‚îå${border}‚îê
‚îÇ ${header} ‚îÇ
‚îú${border}‚î§
‚îÇ ${thought.padEnd(border.length - 2)} ‚îÇ
‚îî${border}‚îò`
        } catch (error) {
            console.error("Error formatting thought:", error)
            return `[Error formatting thought: ${thoughtData.thoughtNumber}]`
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
     * @param input –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
     * @returns –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
     */
    public processThought(input: unknown): {
        content: Array<{ type: string; text: string }>
        isError?: boolean
    } {
        try {
            const validatedInput = this.validateThoughtData(input)

            if (validatedInput.thoughtNumber > validatedInput.totalThoughts) {
                validatedInput.totalThoughts = validatedInput.thoughtNumber
            }

            this.thoughtHistory.push(validatedInput)

            if (validatedInput.branchFromThought && validatedInput.branchId) {
                if (!this.branches[validatedInput.branchId]) {
                    this.branches[validatedInput.branchId] = []
                }
                this.branches[validatedInput.branchId].push(validatedInput)
            }

            try {
                const formattedThought = this.formatThought(validatedInput)
                console.error(formattedThought)
            } catch (formatError) {
                console.error("Failed to format thought for console output:", formatError)
            }

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            const responseObj = {
                thoughtNumber: validatedInput.thoughtNumber,
                totalThoughts: validatedInput.totalThoughts,
                nextThoughtNeeded: validatedInput.nextThoughtNeeded,
                branches: Object.keys(this.branches),
                thoughtHistoryLength: this.thoughtHistory.length,
                isRevision: validatedInput.isRevision || false,
                isBranch: !!validatedInput.branchFromThought,
                status: "success"
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            let responseText = ""
            try {
                responseText = JSON.stringify(responseObj, null, 2)
            } catch (jsonError) {
                console.error("Error stringifying response:", jsonError)
                // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ JSON.stringify
                responseText = JSON.stringify({
                    thoughtNumber: validatedInput.thoughtNumber,
                    totalThoughts: validatedInput.totalThoughts,
                    nextThoughtNeeded: validatedInput.nextThoughtNeeded,
                    status: "success",
                    note: "Response simplified due to JSON serialization error"
                }, null, 2)
            }

            return {
                content: [
                    {
                        type: "text",
                        text: responseText
                    },
                ],
            }
        } catch (error) {
            console.error("Sequential thinking server error:", error)

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –Ω–∞–¥–µ–∂–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º JSON
            let errorMessage = "Unknown error"

            try {
                if (error instanceof Error) {
                    errorMessage = error.message
                } else if (typeof error === 'string') {
                    errorMessage = error
                } else {
                    errorMessage = JSON.stringify(error)
                }
            } catch (jsonError) {
                errorMessage = "Error cannot be converted to string"
            }

            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify(
                            {
                                error: errorMessage,
                                status: "failed",
                            },
                            null,
                            2
                        ),
                    },
                ],
                isError: true,
            }
        }
    }
} 