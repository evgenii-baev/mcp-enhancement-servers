/**
 * @fileoverview Интерфейсы для инструмента Model Selector
 */

/**
 * @typedef {Object} ModelSelectorData
 * @property {string} task - Задача программирования
 * @property {string} [language] - Используемый язык программирования
 * @property {string} [projectScale] - Масштаб проекта
 * @property {string[]} [constraints] - Ограничения или требования
 * @property {string[]} [preferences] - Предпочтения относительно подхода
 * @property {string} [context] - Дополнительный контекст
 */

// Экспорт для документации
export const ModelSelectorParameters = {
    task: "Конкретная задача или проблема программирования, требующая рекомендации по модели/подходу. Будьте максимально конкретны относительно требований вашей задачи — это позволит получить более точные рекомендации архитектурных паттернов, структур данных или алгоритмов. Например, 'разработать систему для обработки асинхронных событий с высокой пропускной способностью' даст более полезные рекомендации, чем просто 'система обработки событий'.",

    language: "Язык программирования, используемый в проекте (для предоставления рекомендаций, специфичных для языка). Различные языки имеют разные идиомы, библиотеки и паттерны, которые влияют на выбор оптимальной архитектуры. Например, для JavaScript может быть рекомендован реактивный подход с использованием RxJS, тогда как для Go могут быть предложены горутины с каналами.",

    projectScale: "Размер проекта (Small, Medium, Large, Enterprise) для влияния на архитектурные рекомендации. Масштаб проекта существенно влияет на архитектурные решения — небольшие проекты выигрывают от простых решений, а крупные корпоративные системы требуют более структурированных подходов с учетом долгосрочной поддержки, масштабируемости и совместной разработки.",

    constraints: "Любые ограничения или требования, которые могут повлиять на выбор модели/подхода. Это технические, организационные или бизнес-ограничения, такие как производительность, безопасность, требования к хранению, соответствие регулированию, доступность или ограничения инфраструктуры. Явное указание ограничений помогает отфильтровать неподходящие варианты.",

    preferences: "Желаемые качества или характеристики, которыми должна обладать выбранная модель/подход. Это может включать предпочтения относительно читаемости кода, простоты поддержки, возможности тестирования, гибкости для будущих изменений или согласованности с существующими системами. Предпочтения помогают расставить приоритеты в рекомендациях.",

    context: "Дополнительный контекст о проекте, среде или требованиях. Этот параметр позволяет предоставить любую дополнительную информацию, которая может быть релевантна для выбора подходящей модели, но не подходит под другие параметры. Это может включать историю проекта, структуру команды, процессы разработки или планы будущего развития."
}; 