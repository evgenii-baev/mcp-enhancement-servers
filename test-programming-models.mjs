// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs/promises';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
async function loadMentalModels() {
    const filePath = join(__dirname, 'packages/server-clear-thought/src/models/mental-models.json');
    const fileContent = await fs.readFile(filePath, 'utf-8');
    return JSON.parse(fileContent);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏
function formatModelOutput(model) {
    const border = '‚îÄ'.repeat(Math.max(model.name.length + 20, model.definition.length + 4));

    const formatList = (items) =>
        items.map(item => `‚îÇ ‚Ä¢ ${item.padEnd(border.length - 4)} ‚îÇ`).join('\n');

    return `
‚îå${border}‚îê
‚îÇ üß† Mental Model: ${model.name.padEnd(border.length - 16)} ‚îÇ
‚îú${border}‚î§
‚îÇ Definition: ${model.definition.padEnd(border.length - 13)} ‚îÇ
‚îú${border}‚î§
‚îÇ When to Use:${' '.repeat(border.length - 12)} ‚îÇ
${formatList(model.when_to_use)}
‚îú${border}‚î§
‚îÇ Steps:${' '.repeat(border.length - 7)} ‚îÇ
${formatList(model.steps)}
‚îú${border}‚î§
‚îÇ Example: ${model.example.padEnd(border.length - 10)} ‚îÇ
‚îú${border}‚î§
‚îÇ Pitfalls:${' '.repeat(border.length - 10)} ‚îÇ
${formatList(model.pitfalls)}
‚îî${border}‚îò`;
}

// –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∫ –ø—Ä–æ–±–ª–µ–º–µ
function applyModelToProblem(model, problem) {
    // –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏
    const analysisSteps = model.steps.map((step, index) => {
        return `Step ${index + 1}: ${step}\nAnalysis: ${generateAnalysisForStep(problem, step)}`;
    }).join('\n\n');

    return `
üîç Applying "${model.name}" to Problem: "${problem}"

${analysisSteps}

üöÄ Conclusion:
Based on the ${model.name} mental model, we can conclude that ${generateConclusion(model, problem)}

‚ö†Ô∏è Watch out for:
${model.pitfalls[0]} and ${model.pitfalls[1]}
`;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —à–∞–≥—É
function generateAnalysisForStep(problem, step) {
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    return `Considering "${problem}" through the lens of this step, we observe [analysis based on model step]`;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
function generateConclusion(model, problem) {
    switch (model.id) {
        case 'composition_vs_inheritance':
            return 'composition provides more flexibility than inheritance for this particular case, allowing for dynamic behavior changes and avoiding the fragile base class problem.';
        case 'single_responsibility':
            return 'breaking down the current structure into smaller, more focused components will improve maintainability and reduce coupling.';
        case 'interface_segregation':
            return 'designing clear interfaces separated from implementation details will allow for multiple implementations and easier testing.';
        case 'actor_model':
            return 'using isolated actors communicating through messages eliminates shared state problems and provides a natural model for the concurrent aspects of this system.';
        case 'time_space_complexity':
            return 'the optimal algorithm for this problem has O(n log n) time complexity, making it suitable for large datasets while maintaining reasonable performance.';
        default:
            return 'applying this mental model provides valuable insights that lead to improved design decisions.';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function runDemonstration() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
        const modelsData = await loadMentalModels();

        // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏
        const programmingModels = [
            'composition_vs_inheritance',
            'single_responsibility',
            'interface_segregation',
            'actor_model',
            'time_space_complexity'
        ];

        console.log('='.repeat(80));
        console.log('–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ì–†–ê–ú–ú–ù–û-–û–†–ò–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–• –ú–ï–ù–¢–ê–õ–¨–ù–´–• –ú–û–î–ï–õ–ï–ô');
        console.log('='.repeat(80));

        // –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        const testProblems = {
            'composition_vs_inheritance': 'How should I structure my game entities like Player, Enemy, and NPC that share common behavior?',
            'single_responsibility': 'Our UserManager class handles authentication, profile updates, and data persistence, making it hard to maintain',
            'interface_segregation': 'We need to support multiple payment processors in our e-commerce application',
            'actor_model': 'Our multi-threaded application has frequent race conditions and deadlocks',
            'time_space_complexity': 'We need to search through a sorted dataset of 10 million records efficiently'
        };

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –µ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        for (const modelId of programmingModels) {
            const model = modelsData.mental_models.find(m => m.id === modelId);

            if (model) {
                console.log('\n\n' + '='.repeat(80));
                console.log(`–ú–û–î–ï–õ–¨: ${model.name}`);
                console.log('='.repeat(80));

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                console.log(formatModelOutput(model));

                // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫ –ø—Ä–æ–±–ª–µ–º–µ
                const problem = testProblems[modelId];
                console.log('\n' + '-'.repeat(80));
                console.log('–ü–†–ò–ú–ï–† –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ö –ü–†–û–ë–õ–ï–ú–ï:');
                console.log('-'.repeat(80));
                console.log(applyModelToProblem(model, problem));

                // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
                console.log('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
                await new Promise(resolve => process.stdin.once('data', resolve));
            }
        }

        console.log('\n' + '='.repeat(80));
        console.log('–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê');
        console.log('='.repeat(80));
        console.log('\n–í—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏!');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º stdin
        process.stdin.destroy();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
runDemonstration(); 